{
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid permute(int* arr, int start, int end) {\n    if (start == end) {\n        for (int i = 0; i <= end; i++) {\n            printf(\"%d \", arr[i]);\n        }\n        printf(\"\\n\");\n        return;\n    }\n    for (int i = start; i <= end; i++) {\n        int temp = arr[start];\n        arr[start] = arr[i];\n        arr[i] = temp;\n        permute(arr, start + 1, end);\n        temp = arr[start];\n        arr[start] = arr[i];\n        arr[i] = temp; // backtrack\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    permute(arr, 0, n - 1);\n    return 0;\n}",
  "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid permute(vector<int>& arr, int start, int end) {\n    if (start == end) {\n        for (int i = 0; i <= end; i++) {\n            cout << arr[i] << \" \";\n        }\n        cout << endl;\n        return;\n    }\n    for (int i = start; i <= end; i++) {\n        swap(arr[start], arr[i]);\n        permute(arr, start + 1, end);\n        swap(arr[start], arr[i]); // backtrack\n    }\n}\n\nint main() {\n    vector<int> arr = {1, 2, 3};\n    permute(arr, 0, arr.size() - 1);\n    return 0;\n}",
  "java": "import java.util.*;\n\npublic class Permutations {\n    public static void permute(int[] arr, int start, int end) {\n        if (start == end) {\n            for (int i = 0; i <= end; i++) {\n                System.out.print(arr[i] + \" \");\n            }\n            System.out.println();\n            return;\n        }\n        for (int i = start; i <= end; i++) {\n            int temp = arr[start];\n            arr[start] = arr[i];\n            arr[i] = temp;\n            permute(arr, start + 1, end);\n            temp = arr[start];\n            arr[start] = arr[i];\n            arr[i] = temp; // backtrack\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        permute(arr, 0, arr.length - 1);\n    }\n}",
  "python": "def generate_permutations(arr):\n    if len(arr) == 1:\n        return [arr]\n\n    result = []\n    for i in range(len(arr)):\n        current = arr[i]\n        remaining = arr[:i] + arr[i+1:]\n        remaining_permutations = generate_permutations(remaining)\n        for perm in remaining_permutations:\n            result.append([current] + perm)\n    return result\n\n# Example usage:\nnums = [1, 2, 3]\nprint(generate_permutations(nums))",
  "javascript": "function generatePermutations(arr) {\n    const result = [];\n\n    if (arr.length === 1) return [arr];\n\n    for (let i = 0; i < arr.length; i++) {\n        const current = arr[i];\n        const remaining = arr.slice(0, i).concat(arr.slice(i + 1));\n\n        const remainingPermutations = generatePermutations(remaining);\n\n        for (let perm of remainingPermutations) {\n            result.push([current, ...perm]);\n        }\n    }\n\n    return result;\n}\n\n// Example usage:\nconst nums = [1, 2, 3];\nconsole.log(generatePermutations(nums));"
}
