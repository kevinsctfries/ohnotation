{
  "javascript": "function mergeSort(arr) {\n    if (arr.length <= 1) return arr;\n\n    const mid = Math.floor(arr.length / 2);\n    const left = mergeSort(arr.slice(0, mid));\n    const right = mergeSort(arr.slice(mid));\n\n    return merge(left, right);\n}\n\nfunction merge(left, right) {\n    let result = [], i = 0, j = 0;\n\n    while (i < left.length && j < right.length) {\n        result.push(left[i] < right[j] ? left[i++] : right[j++]);\n    }\n\n    return result.concat(left.slice(i)).concat(right.slice(j));\n}\n\n// Example usage:\nconst arr = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(arr));",
  "c": "#include <stdio.h>\n\nvoid merge(int arr[], int left, int mid, int right) {\n    int n1 = mid - left + 1, n2 = right - mid;\n    int L[n1], R[n2];\n\n    for (int i = 0; i < n1; i++) L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];\n\n    int i = 0, j = 0, k = left;\n    while (i < n1 && j < n2) {\n        arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];\n    }\n\n    while (i < n1) arr[k++] = L[i++];\n    while (j < n2) arr[k++] = R[j++];\n}\n\nvoid mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {38, 27, 43, 3, 9, 82, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    mergeSort(arr, 0, size - 1);\n    printArray(arr, size);\n\n    return 0;\n}",
  "cpp": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid merge(vector<int>& arr, int left, int mid, int right) {\n    vector<int> leftPart(arr.begin() + left, arr.begin() + mid + 1);\n    vector<int> rightPart(arr.begin() + mid + 1, arr.begin() + right + 1);\n\n    int i = 0, j = 0, k = left;\n\n    while (i < leftPart.size() && j < rightPart.size()) {\n        arr[k++] = (leftPart[i] < rightPart[j]) ? leftPart[i++] : rightPart[j++];\n    }\n\n    while (i < leftPart.size()) arr[k++] = leftPart[i++];\n    while (j < rightPart.size()) arr[k++] = rightPart[j++];\n}\n\nvoid mergeSort(vector<int>& arr, int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    vector<int> arr = {38, 27, 43, 3, 9, 82, 10};\n\n    mergeSort(arr, 0, arr.size() - 1);\n\n    for (int num : arr) cout << num << \" \";\n    cout << endl;\n\n    return 0;\n}",
  "java": "public class MergeSort {\n    public static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1, n2 = right - mid;\n        int[] L = new int[n1], R = new int[n2];\n\n        System.arraycopy(arr, left, L, 0, n1);\n        System.arraycopy(arr, mid + 1, R, 0, n2);\n\n        int i = 0, j = 0, k = left;\n        while (i < n1 && j < n2) {\n            arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];\n        }\n\n        while (i < n1) arr[k++] = L[i++];\n        while (j < n2) arr[k++] = R[j++];\n    }\n\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = left + (right - left) / 2;\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {38, 27, 43, 3, 9, 82, 10};\n        mergeSort(arr, 0, arr.length - 1);\n        System.out.println(java.util.Arrays.toString(arr));\n    }\n}",
  "python": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\n# Example usage:\narr = [38, 27, 43, 3, 9, 82, 10]\nprint(merge_sort(arr))"
}
