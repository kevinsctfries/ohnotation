{
  "c": "#include <stdio.h>\n\nint binarySearch(int arr[], int size, int target) {\n    int left = 0, right = size - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (arr[mid] == target) return mid;\n        else if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\nvoid findDuplicates(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (binarySearch(arr, size, arr[i]) != i) {\n            printf(\"Duplicate: %d\\n\", arr[i]);\n        }\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    findDuplicates(arr, size);\n    return 0;\n}",
  "cpp": "#include <iostream>\nusing namespace std;\n\nint binarySearch(const vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (arr[mid] == target) return mid;\n        else if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\nvoid findDuplicates(const vector<int>& arr) {\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (binarySearch(arr, arr[i]) != i) {\n            cout << \"Duplicate: \" << arr[i] << endl;\n        }\n    }\n}\n\nint main() {\n    vector<int> arr = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9};\n    findDuplicates(arr);\n    return 0;\n}",
  "java": "public class BinarySearchExample {\n\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0, right = arr.length - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] == target) return mid;\n            else if (arr[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n\n    public static void findDuplicates(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (binarySearch(arr, arr[i]) != i) {\n                System.out.println(\"Duplicate: \" + arr[i]);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9};\n        findDuplicates(arr);\n    }\n}",
  "javascript": "function binarySearch(arr, target) {\n  let left = 0, right = arr.length - 1;\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) return mid;\n    else if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n  }\n  return -1;\n}\n\nfunction findDuplicates(arr) {\n  const duplicates = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (binarySearch(arr, arr[i]) !== i && !duplicates.includes(arr[i])) {\n      duplicates.push(arr[i]);\n    }\n  }\n  return duplicates;\n}\n\n// Example usage\nconst sortedArray = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9];\nconsole.log(findDuplicates(sortedArray)); // Output: [5]",
  "python": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\ndef find_duplicates(arr):\n    duplicates = []\n    for i in range(len(arr)):\n        if binary_search(arr, arr[i]) != i and arr[i] not in duplicates:\n            duplicates.append(arr[i])\n    return duplicates\n\n# Example usage\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(find_duplicates(arr))  # Output: [5]"
}
